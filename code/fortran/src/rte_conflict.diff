diff --git a/code/fortran/src/rte_sparse_matrices.f90 b/code/fortran/src/rte_sparse_matrices.f90
index 2fa1ab7..85cfc3f 100644
--- a/code/fortran/src/rte_sparse_matrices.f90
+++ b/code/fortran/src/rte_sparse_matrices.f90
@@ -3,17 +3,18 @@ use sag
 use kelp_context
 use mgmres
 !use hdf5_utils
+#include "lisf.h"
 implicit none
 
-type solver_params
+type solver_opts
    integer maxiter_inner, maxiter_outer
    double precision tol_abs, tol_rel
-end type solver_params
+end type solver_opts
 
 type rte_mat
    type(space_angle_grid) grid
    type(optical_properties) iops
-   type(solver_params) params
+   type(solver_opts) params
    integer nx, ny, nz, nomega
    integer i, j, k, p
    integer nonzero, n_total
@@ -29,13 +30,13 @@ type rte_mat
 
    ! Pointer to solver subroutine
    ! Set to mgmres by default
-   procedure(solver_interface), pointer, nopass :: solver => mgmres_st
+   !procedure(solver_interface), pointer, nopass :: solver => mgmres_st
 
  contains
    procedure :: init => mat_init
    procedure :: deinit => mat_deinit
    procedure :: calculate_size
-   procedure :: set_solver_params => mat_set_solver_params
+   procedure :: set_solver_opts => mat_set_solver_opts
    procedure :: assign => mat_assign
    procedure :: add => mat_add
    procedure :: assign_rhs => mat_assign_rhs
@@ -87,32 +88,55 @@ contains
     type(optical_properties) iops
     integer nnz, n_total
 
+    LIS_INTEGER comm_world
+
+    comm_world = LIS_COMM_WORLD
+
     mat%grid = grid
     mat%iops = iops
 
     call mat%calculate_size()
 
+    mat%solver_opts = ''
+    mat%ierr = 0
+
     n_total = mat%n_total
     nnz = mat%nonzero
-    allocate(mat%surface_vals(grid%angles%nomega))
-    allocate(mat%row(nnz))
-    allocate(mat%col(nnz))
-    allocate(mat%data(nnz))
-    allocate(mat%rhs(n_total))
-    allocate(mat%sol(n_total))
 
-    call zeros(mat%rhs, n_total)
-    call zeros(mat%sol, n_total)
+    call lis_initialize(mat%ierr)
+
+    call lis_solver_create(mat%solver, mat%ierr)
 
+    call lis_matrix_create(comm_world, mat%A, mat%ierr)
+    call lis_vector_create(comm_world, mat%b, mat%ierr)
+    call lis_vector_create(comm_world, mat%x, mat%ierr)
+
+    call lis_matrix_set_size(mat%A, 0, n_total, mat%ierr)
+    call lis_vector_set_size(mat%b, 0, n_total, mat%ierr)
+    call lis_vector_set_size(mat%x, 0, n_total, mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'INIT ERR: ', mat%ierr
+       call exit(1)
+    end if
+
+    allocate(mat%surface_vals(grid%angles%nomega))
   end subroutine mat_init
 
   subroutine mat_deinit(mat)
     class(rte_mat) mat
-    deallocate(mat%row)
-    deallocate(mat%col)
-    deallocate(mat%data)
-    deallocate(mat%rhs)
-    deallocate(mat%sol)
+
+    call lis_matrix_destroy(mat%A, mat%ierr)
+    call lis_vector_destroy(mat%b, mat%ierr)
+    call lis_vector_destroy(mat%x, mat%ierr)
+    call lis_solver_destroy(mat%solver, mat%ierr)
+    call lis_finalize(mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'DEINIT ERR: ', mat%ierr
+       call exit(1)
+    end if
+
     deallocate(mat%surface_vals)
   end subroutine mat_deinit
 
@@ -156,21 +180,24 @@ contains
 
   subroutine mat_solve(mat)
     class(rte_mat) mat
-    type(solver_params) params
+    type(solver_opts) params
+
+    LIS_INTEGER matrix_type
 
+    matrix_type = LIS_MATRIX_CSR
     params = mat%params
 
     write(*,*) 'mat%n_total =', mat%n_total
     write(*,*) 'mat%nonzero =', mat%nonzero
-    write(*,*) 'size(mat%row) =', size(mat%row)
-    write(*,*) 'size(mat%col) =', size(mat%col)
-    write(*,*) 'size(mat%data) =', size(mat%data)
-    write(*,*) 'size(mat%sol) =', size(mat%sol)
-    write(*,*) 'size(mat%rhs) =', size(mat%rhs)
-    write(*,*) 'params%maxiter_outer =', params%maxiter_outer
-    write(*,*) 'params%maxiter_inner =', params%maxiter_inner
-    write(*,*) 'params%tol_rel =', params%tol_rel
-    write(*,*) 'params%tol_abs =', params%tol_abs
+    ! write(*,*) 'size(mat%row) =', size(mat%row)
+    ! write(*,*) 'size(mat%col) =', size(mat%col)
+    ! write(*,*) 'size(mat%data) =', size(mat%data)
+    ! write(*,*) 'size(mat%sol) =', size(mat%sol)
+    ! write(*,*) 'size(mat%rhs) =', size(mat%rhs)
+    ! write(*,*) 'params%maxiter_outer =', params%maxiter_outer
+    ! write(*,*) 'params%maxiter_inner =', params%maxiter_inner
+    ! write(*,*) 'params%tol_rel =', params%tol_rel
+    ! write(*,*) 'params%tol_abs =', params%tol_abs
     ! open(unit=1, file='row.txt')
     ! open(unit=2, file='col.txt')
     ! open(unit=3, file='data.txt')
@@ -186,27 +213,28 @@ contains
     ! close(3)
     ! close(4)
 
-    call mat%solver(mat%n_total, mat%nonzero, &
-         mat%row, mat%col, mat%data, mat%sol, mat%rhs, &
-         params%maxiter_outer, params%maxiter_inner, &
-         params%tol_abs, params%tol_rel)
+    ! call mat%solver(mat%n_total, mat%nonzero, &
+    !      mat%row, mat%col, mat%data, mat%sol, mat%rhs, &
+    !      params%maxiter_outer, params%maxiter_inner, &
+    !      params%tol_abs, params%tol_rel)
+
+    call lis_matrix_set_type(mat%A, matrix_type, mat%ierr)
+    call lis_matrix_assemble(mat%A, mat%ierr)
+    if(len(trim(mat%solver_opts)) .gt. 0) then
+       call lis_solver_set_option(trim(mat%solver_opts), mat%solver, mat%ierr)
+    end if
+    call lis_solve(mat%A, mat%b, mat%x, mat%solver, mat%ierr)
 
     ! write(5,*) mat%sol
     ! close(5)
 
   end subroutine mat_solve
 
-  subroutine mat_set_solver_params(mat, maxiter_outer, &
-       maxiter_inner, tol_abs, tol_rel)
+  subroutine mat_set_solver_opts(mat, solver_opts)
     class(rte_mat) mat
-    integer maxiter_outer, maxiter_inner
-    double precision tol_abs, tol_rel
-
-    mat%params%maxiter_outer = maxiter_outer
-    mat%params%maxiter_inner = maxiter_inner
-    mat%params%tol_abs = tol_abs
-    mat%params%tol_rel = tol_rel
-  end subroutine mat_set_solver_params
+    character(len=*) solver_opts
+    mat%solver_opts = solver_opts
+  end subroutine mat_set_solver_opts
 
   function mat_ind(mat, i, j, k, p) result(ind)
     ! Assuming var ordering: z, x, y, omega
@@ -218,30 +246,44 @@ contains
          (k-1) * mat%z_block_size + p * mat%omega_block_size
   end function mat_ind
 
-  subroutine mat_assign(mat, row_num, ent, val, i, j, k, p)
+  subroutine mat_assign(mat, row_num, val, i, j, k, p)
     ! It's assumed that this is the only time this entry is defined
     class(rte_mat) mat
     double precision val
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num, col_num
 
-    mat%row(ent) = row_num
-    mat%col(ent) = mat%ind(i, j, k, p)
-    mat%data(ent) = val
+    col_num = mat%ind(i,j,k,p)
+    ! write(*,*) 'row_num =', row_num
+    ! write(*,*) 'col_num =', col_num
+    ! write(*,*) 'val =', val
+    call lis_matrix_set_value(LIS_INS_VALUE, &
+         row_num, col_num, val, mat%A, mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'ASSIGN ERR: ', mat%ierr
+       call exit(1)
+    end if
 
-    ent = ent + 1
   end subroutine mat_assign
 
-  subroutine mat_add(mat, repeat_ent, val)
+  subroutine mat_add(mat, row_num, val)
     ! Use this when you know that this entry has already been assigned
     ! and you'd like to add this value to the existing value.
 
     class(rte_mat) mat
     double precision val
-    integer repeat_ent
+    integer row_num
+
+    ! Repeats all occur along main diagonal
+    call lis_matrix_set_value(LIS_ADD_VALUE, &
+         row_num, row_num, val, mat%A, mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'ADD ERR: ', mat%ierr
+       call exit(1)
+    end if
 
-    ! Entry number where value is already stored
-    mat%data(repeat_ent) = mat%data(repeat_ent) + val
   end subroutine mat_add
 
   subroutine mat_assign_rhs(mat, row_num, data)
@@ -249,7 +291,13 @@ contains
     double precision data
     integer row_num
 
-    mat%rhs(row_num) = data
+    ! LIS vectors are 0-indexed
+    call lis_vector_set_value(LIS_INS_VALUE, row_num, data, mat%b, mat%ierr)
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'RHS ERR: ', mat%ierr
+       call exit(1)
+    end if
+
   end subroutine mat_assign_rhs
 
   ! subroutine mat_store_index(mat, row_num, col_num)
@@ -276,7 +324,7 @@ contains
   !   ! end do
   ! end function mat_find_index
 
-  subroutine attenuate(mat, indices, repeat_ent)
+  subroutine attenuate(mat, indices, row_num)
     ! Has to be called after angular_integral
     ! Because they both write to the same matrix entry
     ! And adding here is more efficient than a conditional
@@ -285,21 +333,21 @@ contains
     double precision attenuation
     type(index_list) indices
     double precision aa, bb
-    integer repeat_ent
+    integer row_num
 
     aa = mat%iops%abs_grid(indices%i, indices%j, indices%k)
     bb = mat%iops%scat
     attenuation = aa + bb
 
-    call mat%add(repeat_ent, attenuation)
+    call mat%add(row_num, attenuation)
   end subroutine attenuate
 
-  subroutine x_cd2(mat, indices, row_num, ent)
+  subroutine x_cd2(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dx
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -311,17 +359,17 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%cos_theta_p(p) / (2.d0 * dx)
 
-    call mat%assign(row_num,ent,-val,i-1,j,k,p)
-    call mat%assign(row_num,ent,val,i+1,j,k,p)
+    call mat%assign(row_num,-val,i-1,j,k,p)
+    call mat%assign(row_num,val,i+1,j,k,p)
   end subroutine x_cd2
 
-  subroutine x_cd2_first(mat, indices, row_num, ent)
+  subroutine x_cd2_first(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dx
     integer nx
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -334,16 +382,16 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%cos_theta_p(p) / (2.d0 * dx)
 
-    call mat%assign(row_num,ent,-val,nx,j,k,p)
-    call mat%assign(row_num,ent,val,i+1,j,k,p)
+    call mat%assign(row_num,-val,nx,j,k,p)
+    call mat%assign(row_num,val,i+1,j,k,p)
   end subroutine x_cd2_first
 
-  subroutine x_cd2_last(mat, indices, row_num, ent)
+  subroutine x_cd2_last(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dx
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -355,16 +403,16 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%cos_theta_p(p) / (2.d0 * dx)
 
-    call mat%assign(row_num,ent,-val,i-1,j,k,p)
-    call mat%assign(row_num,ent,val,1,j,k,p)
+    call mat%assign(row_num,-val,i-1,j,k,p)
+    call mat%assign(row_num,val,1,j,k,p)
   end subroutine x_cd2_last
 
-  subroutine y_cd2(mat, indices, row_num, ent)
+  subroutine y_cd2(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dy
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -376,17 +424,17 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%sin_theta_p(p) / (2.d0 * dy)
 
-    call mat%assign(row_num,ent,-val,i,j-1,k,p)
-    call mat%assign(row_num,ent,val,i,j+1,k,p)
+    call mat%assign(row_num,-val,i,j-1,k,p)
+    call mat%assign(row_num,val,i,j+1,k,p)
   end subroutine y_cd2
 
-  subroutine y_cd2_first(mat, indices, row_num, ent)
+  subroutine y_cd2_first(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dy
     integer ny
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -399,16 +447,16 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%sin_theta_p(p) / (2.d0 * dy)
 
-    call mat%assign(row_num,ent,-val,i,ny,k,p)
-    call mat%assign(row_num,ent,val,i,j+1,k,p)
+    call mat%assign(row_num,-val,i,ny,k,p)
+    call mat%assign(row_num,val,i,j+1,k,p)
   end subroutine y_cd2_first
 
-  subroutine y_cd2_last(mat, indices, row_num, ent)
+  subroutine y_cd2_last(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dy
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -420,16 +468,16 @@ contains
     val = mat%grid%angles%sin_phi_p(p) &
          * mat%grid%angles%sin_theta_p(p) / (2.d0 * dy)
 
-    call mat%assign(row_num,ent,-val,i,j-1,k,p)
-    call mat%assign(row_num,ent,val,i,1,k,p)
+    call mat%assign(row_num,-val,i,j-1,k,p)
+    call mat%assign(row_num,val,i,1,k,p)
   end subroutine y_cd2_last
 
-  subroutine z_cd2(mat, indices, row_num, ent)
+  subroutine z_cd2(mat, indices, row_num)
     class(rte_mat) mat
     double precision val, dz
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -440,11 +488,11 @@ contains
 
     val = mat%grid%angles%cos_phi_p(p) / (2.d0 * dz)
 
-    call mat%assign(row_num,ent,-val,i,j,k-1,p)
-    call mat%assign(row_num,ent,val,i,j,k+1,p)
+    call mat%assign(row_num,-val,i,j,k-1,p)
+    call mat%assign(row_num,val,i,j,k+1,p)
   end subroutine z_cd2
 
-  subroutine z_fd2(mat, indices, row_num, ent, repeat_ent)
+  subroutine z_fd2(mat, indices, row_num)
     ! Has to be called after angular_integral
     ! Because they both write to the same matrix entry
     ! And adding here is more efficient than a conditional
@@ -453,7 +501,7 @@ contains
     double precision val, val1, val2, val3, dz
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent, repeat_ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -468,12 +516,12 @@ contains
     val2 = 4.d0 * val
     val3 = -val
 
-    call mat%add(repeat_ent, val1)
-    call mat%assign(row_num,ent,val2,i,j,k+1,p)
-    call mat%assign(row_num,ent,val3,i,j,k+2,p)
+    call mat%add(row_num, val1)
+    call mat%assign(row_num,val2,i,j,k+1,p)
+    call mat%assign(row_num,val3,i,j,k+2,p)
   end subroutine z_fd2
 
-  subroutine z_bd2(mat, indices, row_num, ent, repeat_ent)
+  subroutine z_bd2(mat, indices, row_num)
     ! Has to be called after angular_integral
     ! Because they both write to the same matrix entry
     ! And adding here is more efficient than a conditional
@@ -482,7 +530,7 @@ contains
     double precision val, val1, val2, val3, dz
     type(index_list) indices
     integer i, j, k, p
-    integer row_num, ent, repeat_ent
+    integer row_num
 
     i = indices%i
     j = indices%j
@@ -497,33 +545,33 @@ contains
     val2 = -4.d0 * val
     val3 = val
 
-    call mat%add(repeat_ent, val1)
-    call mat%assign(row_num,ent,val2,i,j,k-1,p)
-    call mat%assign(row_num,ent,val3,i,j,k-2,p)
+    call mat%add(row_num, val1)
+    call mat%assign(row_num,val2,i,j,k-1,p)
+    call mat%assign(row_num,val3,i,j,k-2,p)
   end subroutine z_bd2
 
-  subroutine angular_integral(mat, indices, row_num, ent)
+  subroutine angular_integral(mat, indices, row_num)
     class(rte_mat) mat
     ! Primed angular integration variables
     integer pp
     double precision val
     type(index_list) indices
-    integer row_num, ent
+    integer row_num
 
     ! Interior
     do pp=1, mat%grid%angles%nomega
        ! TODO: Make sure I don't have p and pp backwards
        val = -mat%iops%scat * mat%iops%vsf_integral(indices%p, pp)
-       call mat%assign(row_num, ent, val, indices%i, indices%j, indices%k, pp)
+       call mat%assign(row_num, val, indices%i, indices%j, indices%k, pp)
     end do
   end subroutine angular_integral
 
-  subroutine z_surface_bc(mat, indices, row_num, ent, repeat_ent)
+  subroutine z_surface_bc(mat, indices, row_num)
     class(rte_mat) mat
     double precision bc_val
     type(index_list) indices
     double precision val1, val2, dz
-    integer row_num, ent, repeat_ent
+    integer row_num
 
     dz = mat%grid%z%spacing(1)
 
@@ -531,18 +579,18 @@ contains
     val2 = 7.d0 * val1
     bc_val = 8.d0 * val1 * mat%surface_vals(indices%p)
 
-    call mat%assign(row_num,ent,val1,indices%i,indices%j,2,indices%p)
-    call mat%add(repeat_ent, val2)
+    call mat%assign(row_num,val1,indices%i,indices%j,2,indices%p)
+    call mat%add(row_num, val2)
     call mat%assign_rhs(row_num, bc_val)
 
   end subroutine z_surface_bc
 
-    subroutine z_bottom_bc(mat, indices, row_num, ent, repeat_ent)
+    subroutine z_bottom_bc(mat, indices, row_num)
     class(rte_mat) mat
     type(index_list) indices
     double precision val1, val2, dz
     integer nz
-    integer row_num, ent, repeat_ent
+    integer row_num
 
     dz = mat%grid%z%spacing(1)
     nz = mat%grid%z%num
@@ -550,8 +598,8 @@ contains
     val1 = -mat%grid%angles%cos_phi_p(indices%p) / (5.d0 * dz)
     val2 = 7.d0 * val1
 
-    call mat%assign(row_num,ent,val1,indices%i,indices%j,nz-1,indices%p)
-    call mat%add(repeat_ent, val2)
+    call mat%assign(row_num,val1,indices%i,indices%j,nz-1,indices%p)
+    call mat%add(row_num, val2)
 
   end subroutine z_bottom_bc
 
