diff --git a/code/fortran/src/rte_sparse_matrices.f90 b/code/fortran/src/rte_sparse_matrices.f90
index 2fa1ab7..afbd556 100644
--- a/code/fortran/src/rte_sparse_matrices.f90
+++ b/code/fortran/src/rte_sparse_matrices.f90
@@ -3,17 +3,18 @@ use sag
 use kelp_context
 use mgmres
 !use hdf5_utils
+#include "lisf.h"
 implicit none
 
-type solver_params
+type solver_opts
    integer maxiter_inner, maxiter_outer
    double precision tol_abs, tol_rel
-end type solver_params
+end type solver_opts
 
 type rte_mat
    type(space_angle_grid) grid
    type(optical_properties) iops
-   type(solver_params) params
+   type(solver_opts) params
    integer nx, ny, nz, nomega
    integer i, j, k, p
    integer nonzero, n_total
@@ -21,21 +22,22 @@ type rte_mat
 
    double precision, dimension(:), allocatable :: surface_vals
 
    ! A stored in coordinate form in row, col, data
    integer, dimension(:), allocatable :: row, col
    double precision, dimension(:), allocatable :: data
    ! b and x stored in rhs in full form
    double precision, dimension(:), allocatable :: rhs, sol
+   ! Lis Matrix and vectors
+   LIS_MATRIX A
+   LIS_VECTOR b, x
+   LIS_SOLVER solver
+   LIS_INTEGER ierr
+   character(len=256) solver_opts
 
    ! Pointer to solver subroutine
    ! Set to mgmres by default
-   procedure(solver_interface), pointer, nopass :: solver => mgmres_st
+   !procedure(solver_interface), pointer, nopass :: solver => mgmres_st
 
  contains
    procedure :: init => mat_init
    procedure :: deinit => mat_deinit
    procedure :: calculate_size
-   procedure :: set_solver_params => mat_set_solver_params
+   procedure :: set_solver_opts => mat_set_solver_opts
    procedure :: assign => mat_assign
    procedure :: add => mat_add
    procedure :: assign_rhs => mat_assign_rhs
@@ -87,32 +89,55 @@ contains
     type(optical_properties) iops
     integer nnz, n_total
 
+    LIS_INTEGER comm_world
+
+    comm_world = LIS_COMM_WORLD
+
     mat%grid = grid
     mat%iops = iops
 
     call mat%calculate_size()
 
+    mat%solver_opts = ''
+    mat%ierr = 0
+
     n_total = mat%n_total
     nnz = mat%nonzero
     allocate(mat%surface_vals(grid%angles%nomega))
     allocate(mat%row(nnz))
     allocate(mat%col(nnz))
     allocate(mat%data(nnz))
     allocate(mat%rhs(n_total))
     allocate(mat%sol(n_total))
 
     call zeros(mat%rhs, n_total)
     call zeros(mat%sol, n_total)
+    call lis_initialize(mat%ierr)
+
+    call lis_solver_create(mat%solver, mat%ierr)
 
+    call lis_matrix_create(comm_world, mat%A, mat%ierr)
+    call lis_vector_create(comm_world, mat%b, mat%ierr)
+    call lis_vector_create(comm_world, mat%x, mat%ierr)
+
+    call lis_matrix_set_size(mat%A, 0, n_total, mat%ierr)
+    call lis_vector_set_size(mat%b, 0, n_total, mat%ierr)
+    call lis_vector_set_size(mat%x, 0, n_total, mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'INIT ERR: ', mat%ierr
+       call exit(1)
+    end if
+
   end subroutine mat_init
 
   subroutine mat_deinit(mat)
     class(rte_mat) mat
     deallocate(mat%row)
     deallocate(mat%col)
     deallocate(mat%data)
     deallocate(mat%rhs)
     deallocate(mat%sol)
+
+    call lis_matrix_destroy(mat%A, mat%ierr)
+    call lis_vector_destroy(mat%b, mat%ierr)
+    call lis_vector_destroy(mat%x, mat%ierr)
+    call lis_solver_destroy(mat%solver, mat%ierr)
+    call lis_finalize(mat%ierr)
+
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'DEINIT ERR: ', mat%ierr
+       call exit(1)
+    end if
+
     deallocate(mat%surface_vals)
   end subroutine mat_deinit
 
@@ -156,21 +181,24 @@ contains
 
   subroutine mat_solve(mat)
     class(rte_mat) mat
-    type(solver_params) params
+    type(solver_opts) params
+
+    LIS_INTEGER matrix_type
 
+    matrix_type = LIS_MATRIX_CSR
     params = mat%params
 
     write(*,*) 'mat%n_total =', mat%n_total
     write(*,*) 'mat%nonzero =', mat%nonzero
-    write(*,*) 'size(mat%row) =', size(mat%row)
-    write(*,*) 'size(mat%col) =', size(mat%col)
-    write(*,*) 'size(mat%data) =', size(mat%data)
-    write(*,*) 'size(mat%sol) =', size(mat%sol)
-    write(*,*) 'size(mat%rhs) =', size(mat%rhs)
-    write(*,*) 'params%maxiter_outer =', params%maxiter_outer
-    write(*,*) 'params%maxiter_inner =', params%maxiter_inner
-    write(*,*) 'params%tol_rel =', params%tol_rel
-    write(*,*) 'params%tol_abs =', params%tol_abs
+    ! write(*,*) 'size(mat%row) =', size(mat%row)
+    ! write(*,*) 'size(mat%col) =', size(mat%col)
+    ! write(*,*) 'size(mat%data) =', size(mat%data)
+    ! write(*,*) 'size(mat%sol) =', size(mat%sol)
+    ! write(*,*) 'size(mat%rhs) =', size(mat%rhs)
+    ! write(*,*) 'params%maxiter_outer =', params%maxiter_outer
+    ! write(*,*) 'params%maxiter_inner =', params%maxiter_inner
+    ! write(*,*) 'params%tol_rel =', params%tol_rel
+    ! write(*,*) 'params%tol_abs =', params%tol_abs
     ! open(unit=1, file='row.txt')
     ! open(unit=2, file='col.txt')
     ! open(unit=3, file='data.txt')
@@ -186,27 +214,28 @@ contains
     ! close(3)
     ! close(4)
 
-    call mat%solver(mat%n_total, mat%nonzero, &
-         mat%row, mat%col, mat%data, mat%sol, mat%rhs, &
-         params%maxiter_outer, params%maxiter_inner, &
-         params%tol_abs, params%tol_rel)
+    ! call mat%solver(mat%n_total, mat%nonzero, &
+    !      mat%row, mat%col, mat%data, mat%sol, mat%rhs, &
+    !      params%maxiter_outer, params%maxiter_inner, &
+    !      params%tol_abs, params%tol_rel)
+
+    call lis_matrix_set_type(mat%A, matrix_type, mat%ierr)
+    call lis_matrix_assemble(mat%A, mat%ierr)
+    if(len(trim(mat%solver_opts)) .gt. 0) then
+       call lis_solver_set_option(trim(mat%solver_opts), mat%solver, mat%ierr)
+    end if
+    call lis_solve(mat%A, mat%b, mat%x, mat%solver, mat%ierr)
 
     ! write(5,*) mat%sol
     ! close(5)
 
   end subroutine mat_solve
 
-  subroutine mat_set_solver_params(mat, maxiter_outer, &
-       maxiter_inner, tol_abs, tol_rel)
+  subroutine mat_set_solver_opts(mat, solver_opts)
     class(rte_mat) mat
-    integer maxiter_outer, maxiter_inner
-    double precision tol_abs, tol_rel
-
-    mat%params%maxiter_outer = maxiter_outer
-    mat%params%maxiter_inner = maxiter_inner
-    mat%params%tol_abs = tol_abs
-    mat%params%tol_rel = tol_rel
-  end subroutine mat_set_solver_params
+    character(len=*) solver_opts
+    mat%solver_opts = solver_opts
+  end subroutine mat_set_solver_opts
 
   function mat_ind(mat, i, j, k, p) result(ind)
     ! Assuming var ordering: z, x, y, omega
@@ -249,7 +292,13 @@ contains
     double precision data
     integer row_num
 
-    mat%rhs(row_num) = data
+    ! LIS vectors are 0-indexed
+    call lis_vector_set_value(LIS_INS_VALUE, row_num, data, mat%b, mat%ierr)
+    if(mat%ierr .ne. 0) then
+       write(*,*) 'RHS ERR: ', mat%ierr
+       call exit(1)
+    end if
+
   end subroutine mat_assign_rhs
 
   ! subroutine mat_store_index(mat, row_num, col_num)
